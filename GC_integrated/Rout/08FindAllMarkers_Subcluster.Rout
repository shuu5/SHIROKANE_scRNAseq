
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R は、自由なソフトウェアであり、「完全に無保証」です。 
一定の条件に従えば、自由にこれを再配布することができます。 
配布条件の詳細に関しては、'license()' あるいは 'licence()' と入力してください。 

R は多くの貢献者による共同プロジェクトです。 
詳しくは 'contributors()' と入力してください。 
また、R や R のパッケージを出版物で引用する際の形式については 
'citation()' と入力してください。 

'demo()' と入力すればデモをみることができます。 
'help()' とすればオンラインヘルプが出ます。 
'help.start()' で HTML ブラウザによるヘルプがみられます。 
'q()' と入力すれば R を終了します。 

> library(Seurat)
要求されたパッケージ SeuratObject をロード中です
要求されたパッケージ sp をロード中です

次のパッケージを付け加えます: ‘SeuratObject’

以下のオブジェクトは ‘package:base’ からマスクされています:

    intersect, t

> library(ComplexHeatmap)
要求されたパッケージ grid をロード中です
========================================
ComplexHeatmap version 2.20.0
Bioconductor page: http://bioconductor.org/packages/ComplexHeatmap/
Github page: https://github.com/jokergoo/ComplexHeatmap
Documentation: http://jokergoo.github.io/ComplexHeatmap-reference

If you use it in published research, please cite either one:
- Gu, Z. Complex Heatmap Visualization. iMeta 2022.
- Gu, Z. Complex heatmaps reveal patterns and correlations in multidimensional 
    genomic data. Bioinformatics 2016.


The new InteractiveComplexHeatmap package can directly export static 
complex heatmaps into an interactive Shiny app with zero effort. Have a try!

This message can be suppressed by:
  suppressPackageStartupMessages(library(ComplexHeatmap))
========================================

> library(clustermole)
> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.4     ✔ readr     2.1.5
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.5.1     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.1
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> 
> # data/processed/subclusters/内のsubclusteringしたオブジェクトを読み込み
> subclust_list <- lapply(list.files("data/processed/subclusters/", pattern = "*.rds", full.names = TRUE), readRDS)
> names(subclust_list) <- gsub("data/processed/subclusters/(.*)_subclust.rds", "\\1", list.files("data/processed/subclusters/", pattern = "*.rds"))
> names(subclust_list) <- gsub("_subclust.rds", "", names(subclust_list))
> 
> # subclust_listの各オブジェクトに対して全クラスタの変動遺伝子を抽出
> cluster_markers_list <- list()
> for (name in names(subclust_list)) {
+   umap_object <- subclust_list[[name]]
+   print(paste0("FindAllMarkers: ", name))
+   umap_object <- PrepSCTFindMarkers(umap_object)
+   cluster_markers <- FindAllMarkers(
+       umap_object,
+       only.pos = TRUE,
+       min.pct = 0.25,
+       logfc.threshold = 0.5
+   )
+   cluster_markers_list[[name]] <- cluster_markers
+ 
+   # markerをrdsとcsvに保存
+   saveRDS(cluster_markers, file = paste0("output/rds/annotation/subclusters/", name, "_cluster_markers.rds"))
+   write.csv(cluster_markers, file = paste0("output/csv/annotation/subclusters/", name, "_cluster_markers.csv"))
+ 
+   # 各クラスターのDEGの数を確認
+   print(paste0("cluster_DEG_number"))
+   print(table(cluster_markers$cluster))
+ 
+   # クラスターごとにDEGを分割してリストにまとめる
+   markers_list <- split(cluster_markers$gene, cluster_markers$cluster)
+ 
+   # リスト内要素の共通項のパターンを集計
+   common_pattern <- ComplexHeatmap::make_comb_mat(markers_list)
+ 
+   ### UpSet Plot
+   print(paste0("processing UpSet"))
+   png(paste0("output/plot/UpSet/subclusters/", name, "_UpSet_plot.png"))
+   ComplexHeatmap::UpSet(common_pattern)
+   dev.off()
+ 
+   # size順に並び変え
+   png(paste0("output/plot/UpSet/subclusters/", name, "_UpSet_plot_size.png"))
+   ComplexHeatmap::UpSet(
+       common_pattern, 
+       comb_order = order(ComplexHeatmap::comb_size(common_pattern))
+   )
+   dev.off()
+ 
+   # クラスター名順に並び変え
+   png(paste0("output/plot/UpSet/subclusters/", name, "_UpSet_plot_cluster.png"))
+   ComplexHeatmap::UpSet(
+       common_pattern,
+       set_order = sort(names(markers_list))
+   )   
+   dev.off()
+ 
+   ### 各遺伝子とパターンコード、他との重複数をデータフレームにまとめる
+   print(paste0("processing extract_comb: ", name))
+   # パターンコード一覧を取得
+   patterns <- comb_name(m = common_pattern)
+ 
+   # 空のリストを用意。名前も付けておく
+   extract_genes <- vector(mode = "list", length = length(patterns))
+   names(extract_genes) <- patterns
+ 
+   # パターンコードごとにextract_combで取り出して、リストに保存
+   for(i in patterns){
+     extract_genes[[i]] <- extract_comb(m = common_pattern, comb_name = i)
+   }
+ 
+   # sapplyでリストにlength関数を繰り返し処理した結果を、orderで降順に並び替え
+   extract_genes <- extract_genes[order(sapply(extract_genes, length), decreasing = T)]
+ 
+   # 遺伝子名とパターンコードについてのデータフレームを作成する機能をリストに繰り返し処理
+   tmp <- mapply(function(x, y){
+     df <- data.frame(genes = x,  # 遺伝子ベクトルが入ったリストから、遺伝子ベクトルを取り出し
+                      code = rep(y, times = length(x)) # リストの名前 (パターンコード)を遺伝子ベクトルの要素数だけ繰り返し
+     )
+     return(df)
+     },
+     x = extract_genes,
+     y = names(extract_genes),
+     SIMPLIFY = F # 結果をリストとして出力させる
+   )
+ 
+   # リストの要素をrbindで縦につなげる
+   genes_df <- do.call(rbind, tmp)
+   rownames(genes_df) <- genes_df$genes
+ 
+   # str_counts関数でパターンコード中の1の数を調べる。
+   genes_df$num_overlap <- stringr::str_count(string = genes_df$code, pattern = "1")
+ 
+   # genes_dfをcsvとrdsに保存
+   write.csv(genes_df, file = paste0("output/csv/annotation/subclusters/", name, "_genes_df.csv"))
+   saveRDS(genes_df, file = paste0("output/rds/annotation/subclusters/", name, "_genes_df.rds"))
+ }
[1] "FindAllMarkers: B_cells"
Found 74 SCT models. Recorrecting SCT counts using minimum median counts: 428
Calculating cluster 1
Calculating cluster 2
Calculating cluster 3
Calculating cluster 4
Calculating cluster 5
Calculating cluster 6
Calculating cluster 7
Calculating cluster 8
Calculating cluster 9
Calculating cluster 10
Calculating cluster 11
[1] "cluster_DEG_number"

  1   2   3   4   5   6   7   8   9  10  11 
 36  39  13  18  24  23  44 125  91 106 223 
[1] "processing UpSet"
[1] "processing extract_comb: B_cells"
[1] "FindAllMarkers: Endothelial_cells"
Found 67 SCT models. Recorrecting SCT counts using minimum median counts: 316
Calculating cluster 1
Calculating cluster 2
Calculating cluster 3
Calculating cluster 4
Calculating cluster 5
Calculating cluster 6
[1] "cluster_DEG_number"

  1   2   3   4   5   6 
 89  17  36  54 112  92 
[1] "processing UpSet"
[1] "processing extract_comb: Endothelial_cells"
[1] "FindAllMarkers: Epithelial_cells"
Found 75 SCT models. Recorrecting SCT counts using minimum median counts: 767
Calculating cluster 1
Calculating cluster 2
Calculating cluster 3
Calculating cluster 4
Calculating cluster 5
Calculating cluster 6
Calculating cluster 7
Calculating cluster 8
Calculating cluster 9
Calculating cluster 10
Calculating cluster 11
Calculating cluster 12
Calculating cluster 13
Calculating cluster 14
Calculating cluster 15
Calculating cluster 16
[1] "cluster_DEG_number"

  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16 
119 347 154 135 198 160  46 125 258 159 108 101  49 293 315 171 
[1] "processing UpSet"
[1] "processing extract_comb: Epithelial_cells"
[1] "FindAllMarkers: Macrophages"
Found 75 SCT models. Recorrecting SCT counts using minimum median counts: 486
Calculating cluster 1
Calculating cluster 2
Calculating cluster 3
Calculating cluster 4
Calculating cluster 5
Calculating cluster 6
Calculating cluster 7
Calculating cluster 8
Calculating cluster 9
[1] "cluster_DEG_number"

  1   2   3   4   5   6   7   8   9 
103  50  57 158  85 100  98 110 123 
[1] "processing UpSet"
[1] "processing extract_comb: Macrophages"
[1] "FindAllMarkers: Mast_cells"
Found 66 SCT models. Recorrecting SCT counts using minimum median counts: 331
Calculating cluster 1
Calculating cluster 2
Calculating cluster 3
Calculating cluster 4
Calculating cluster 5
Calculating cluster 6
[1] "cluster_DEG_number"

  1   2   3   4   5   6 
 35  76   7  15  41 213 
[1] "processing UpSet"
[1] "processing extract_comb: Mast_cells"
[1] "FindAllMarkers: Plasma_cells"
Found 71 SCT models. Recorrecting SCT counts using minimum median counts: 1579
Calculating cluster 1
Calculating cluster 2
Calculating cluster 3
Calculating cluster 4
Calculating cluster 5
Calculating cluster 6
Calculating cluster 7
Calculating cluster 8
Calculating cluster 9
Calculating cluster 10
Calculating cluster 11
Calculating cluster 12
Calculating cluster 13
Calculating cluster 14
Calculating cluster 15
[1] "cluster_DEG_number"

  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15 
 45 656 232   1  16  51   1  28  14  33   1 144  21  20 300 
[1] "processing UpSet"
[1] "processing extract_comb: Plasma_cells"
[1] "FindAllMarkers: Smooth_muscle_cells"
Found 71 SCT models. Recorrecting SCT counts using minimum median counts: 640.5
Calculating cluster 1
Calculating cluster 2
Calculating cluster 3
Calculating cluster 4
Calculating cluster 5
Calculating cluster 6
Calculating cluster 7
Calculating cluster 8
[1] "cluster_DEG_number"

  1   2   3   4   5   6   7   8 
 75 138 118  93 135 148 158 113 
[1] "processing UpSet"
[1] "processing extract_comb: Smooth_muscle_cells"
[1] "FindAllMarkers: T_cells"
Found 75 SCT models. Recorrecting SCT counts using minimum median counts: 545.5
Calculating cluster 1
Calculating cluster 2
Calculating cluster 3
Calculating cluster 4
Calculating cluster 5
Calculating cluster 6
Calculating cluster 7
Calculating cluster 8
Calculating cluster 9
Calculating cluster 10
Calculating cluster 11
Calculating cluster 12
Calculating cluster 13
Calculating cluster 14
Calculating cluster 15
Calculating cluster 16
Calculating cluster 17
[1] "cluster_DEG_number"

  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17 
 52  59 103  92  74  99 107  94  82  84 264 205  68  89  84  75 118 
[1] "processing UpSet"
[1] "processing extract_comb: T_cells"
[1] "FindAllMarkers: Treg_cells"
Found 18 SCT models. Recorrecting SCT counts using minimum median counts: 1219.26
Calculating cluster 1
Calculating cluster 2
Calculating cluster 3
[1] "cluster_DEG_number"

  1   2   3 
186  17 124 
[1] "processing UpSet"
[1] "processing extract_comb: Treg_cells"
> 
> 
> 
> ### clustemoleでannotattion
> # 各クラスターについてoverlapしているセルタイプを取得
> for (name in names(cluster_markers_list)) {
+     print(paste0("processing clustermole overlap: ", name))
+     cluster_markers <- cluster_markers_list[[name]]
+     res_list <- lapply(unique(cluster_markers$cluster), function(x) {
+         genes <- cluster_markers[cluster_markers$cluster == x, "gene"]
+         res <- clustermole_overlaps(genes = genes, species = "hs")
+         return(res)
+     })
+     names(res_list) <- unique(cluster_markers$cluster)
+ 
+     # 結果の確認と上位10個のcelltypeを抽出
+     top_celltypes <- lapply(res_list, function(x) {
+         head(x$celltype, 10)
+     })
+ 
+     # 上位10個のcelltypeをデータフレームに変換
+     top_celltypes_df <- do.call(rbind, lapply(names(top_celltypes), function(cluster) {
+         data.frame(cluster = cluster, celltype = top_celltypes[[cluster]])
+     }))
+ 
+     # CSV形式で保存
+     write.csv(top_celltypes_df, file = paste0("output/csv/annotation/subclusters/top_celltypes_per_cluster_", name, ".csv"), row.names = FALSE)
+ }
[1] "processing clustermole overlap: B_cells"
clustermole_overlaps(genes = genes, species = "hs") でエラー: 
  the genes do not appear to correspond to the given species
呼び出し: lapply -> FUN -> clustermole_overlaps
実行が停止されました 
